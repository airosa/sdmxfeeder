// Generated by CoffeeScript 1.3.3
(function() {
  var WriteJsonProtoPipe, sdmx, time, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  sdmx = require('../pipe/sdmxPipe');

  time = require('../util/time');

  util = require('util');

  WriteJsonProtoPipe = (function(_super) {

    __extends(WriteJsonProtoPipe, _super);

    function WriteJsonProtoPipe(log, registry) {
      this.log = log;
      this.registry = registry;
      this.callbackForQuery = __bind(this.callbackForQuery, this);

      this.cache = {
        series: [],
        groups: []
      };
      this.attributes = {};
      this.obsAttributes = {};
      this.obsAttrValues = {};
      this.codes = {};
      this.structures = {};
      this.dsdKey;
      this.header = {};
      this.waiting = false;
      WriteJsonProtoPipe.__super__.constructor.apply(this, arguments);
    }

    WriteJsonProtoPipe.prototype.processData = function(data) {
      var attr, dim, i, obsDim, ref, structure, _base, _base1, _base2, _i, _len, _name, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.log.debug("" + this.constructor.name + " processData (default)");
      switch (data.type) {
        case sdmx.HEADER:
          return this.header = data.data;
        case sdmx.DATA_SET_HEADER:
          if (!this.paused) {
            this.pause();
          }
          structure = this.header.structure[data.data.structureRef];
          ref = structure.structureRef.ref;
          this.dsdKey = "" + ref.agencyID + ":" + ref.id + "(" + ref.version + ")";
          this.cache.obsDimension = structure.dimensionAtObservation;
          if ((_ref = (_base = this.cache).obsDimension) == null) {
            _base.obsDimension = 'TIME_PERIOD';
          }
          this.registry.query(sdmx.DATA_STRUCTURE_DEFINITION, ref, true, this.callbackForQuery);
          return this.waiting = true;
        case sdmx.SERIES:
          for (attr in data.data.attributes) {
            this.attributes[attr] = null;
          }
          for (attr in data.data.obs.attributes) {
            this.obsAttributes[attr] = null;
          }
          for (dim in data.data.seriesKey) {
            if ((_ref1 = (_base1 = this.codes)[dim]) == null) {
              _base1[dim] = {};
            }
            this.codes[dim][data.data.seriesKey[dim]] = null;
          }
          _ref2 = data.data.obs.obsDimension;
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            obsDim = _ref2[i];
            if ((_ref3 = (_base2 = this.codes)[_name = this.cache.obsDimension]) == null) {
              _base2[_name] = {};
            }
            this.codes[this.cache.obsDimension][obsDim] = null;
          }
          return this.cache.series.push(data.data);
        case sdmx.ATTRIBUTE_GROUP:
          for (attr in data.data.attributes) {
            if ((_ref4 = this.attributes) == null) {
              this.attributes = {};
            }
            this.attributes[attr] = null;
          }
          return this.cache.groups.push(data.data);
        case sdmx.DATA_SET_ATTRIBUTES:
          for (attr in data.data.attributes) {
            if ((_ref5 = this.attributes) == null) {
              this.attributes = {};
            }
            this.attributes[attr] = null;
          }
          return this.cache.groups.push(data.data);
      }
    };

    WriteJsonProtoPipe.prototype.processEnd = function() {
      this.log.debug("" + this.constructor.name + " processEnd");
      this.log.info("cache size " + this.cache.series.length);
      this.attributes = Object.keys(this.attributes).sort();
      this.obsAttributes = Object.keys(this.obsAttributes).sort();
      if (!this.waiting) {
        return this.buildMessage();
      }
    };

    WriteJsonProtoPipe.prototype.callbackForQuery = function(err, result) {
      this.log.debug("" + this.constructor.name + " callbackForQuery");
      if (result == null) {
        throw new Error('Missing Data Structure Definition');
      }
      this.waiting = false;
      this.structures = result;
      this.obsAttrValues = this.getCodedAttrs();
      if (!this.writable) {
        this.buildMessage();
      }
      return this.resume();
    };

    WriteJsonProtoPipe.prototype.getCodedAttrs = function() {
      var attr, dsd, key, result, _ref, _ref1;
      result = {};
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      _ref = dsd.attributeDescriptor;
      for (key in _ref) {
        attr = _ref[key];
        if ((attr != null ? (_ref1 = attr.localRepresentation) != null ? _ref1.enumeration : void 0 : void 0) == null) {
          continue;
        }
        result[key] = {};
      }
      return result;
    };

    WriteJsonProtoPipe.prototype.getDimIds = function() {
      var dim, dsd, ids;
      ids = [];
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      for (dim in dsd.dimensionDescriptor) {
        ids.push(dim);
      }
      return ids;
    };

    WriteJsonProtoPipe.prototype.getDimName = function(dimID) {
      var concept, conceptScheme, conceptSchemeKey, dsd, ref;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      ref = dsd.dimensionDescriptor[dimID].conceptIdentity.ref;
      conceptSchemeKey = "" + ref.agencyID + ":" + ref.maintainableParentID + "(" + ref.maintainableParentVersion + ")";
      conceptScheme = this.structures.conceptSchemes[conceptSchemeKey];
      concept = conceptScheme.concepts[ref.id];
      return concept.name.en;
    };

    WriteJsonProtoPipe.prototype.getAttrName = function(attrId) {
      var concept, conceptScheme, conceptSchemeKey, dsd, ref;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      ref = dsd.attributeDescriptor[attrId].conceptIdentity.ref;
      conceptSchemeKey = "" + ref.agencyID + ":" + ref.maintainableParentID + "(" + ref.maintainableParentVersion + ")";
      conceptScheme = this.structures.conceptSchemes[conceptSchemeKey];
      concept = conceptScheme.concepts[ref.id];
      return concept.name.en;
    };

    WriteJsonProtoPipe.prototype.getAttrDims = function(attrId) {
      var dims, dsd, rel;
      dims = [];
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      rel = dsd.attributeDescriptor[attrId].attributeRelationship;
      if ((rel != null ? rel.dimensions : void 0) != null) {
        return rel.dimensions;
      }
      return dims;
    };

    WriteJsonProtoPipe.prototype.getDimType = function(dimID) {
      var dsd;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      switch (dsd.dimensionDescriptor[dimID].type) {
        case 'timeDimension':
          return 'time';
        case 'measureDimension':
          return 'measure';
        default:
          return null;
      }
    };

    WriteJsonProtoPipe.prototype.getAttrRole = function(attrId) {
      return null;
    };

    WriteJsonProtoPipe.prototype.getAttrMandatory = function(attrId) {
      var dsd;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      return dsd.attributeDescriptor[attrId].assignmentStatus === 'Mandatory';
    };

    WriteJsonProtoPipe.prototype.getDimCodeName = function(code, dimID, dimRole) {
      var cl, dsd, key, ref;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      switch (dimRole) {
        case 'time':
          return code;
        default:
          ref = dsd.dimensionDescriptor[dimID].localRepresentation.enumeration.ref;
          key = "" + ref.agencyID + ":" + ref.id + "(" + ref.version + ")";
          cl = this.structures.codeLists[key];
          return cl.codes[code].name.en;
      }
    };

    WriteJsonProtoPipe.prototype.getAttrCodeName = function(code, attrId) {
      var cl, dsd, key, ref;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      ref = dsd.attributeDescriptor[attrId].localRepresentation.enumeration.ref;
      key = "" + ref.agencyID + ":" + ref.id + "(" + ref.version + ")";
      cl = this.structures.codeLists[key];
      return cl.codes[code].name.en;
    };

    WriteJsonProtoPipe.prototype.attrIsCoded = function(attrId) {
      var dsd, _ref, _ref1, _ref2;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      return ((_ref = dsd.attributeDescriptor[attrId]) != null ? (_ref1 = _ref.localRepresentation) != null ? (_ref2 = _ref1.enumeration) != null ? _ref2.ref : void 0 : void 0 : void 0) != null;
    };

    WriteJsonProtoPipe.prototype.getMeasureName = function(measureId) {
      var concept, conceptScheme, conceptSchemeKey, dsd, ref;
      dsd = this.structures.dataStructureDefinitions[this.dsdKey];
      ref = dsd.measureDescriptor.primaryMeasure.conceptIdentity.ref;
      conceptSchemeKey = "" + ref.agencyID + ":" + ref.maintainableParentID + "(" + ref.maintainableParentVersion + ")";
      conceptScheme = this.structures.conceptSchemes[conceptSchemeKey];
      concept = conceptScheme.concepts[ref.id];
      return concept.name.en;
    };

    WriteJsonProtoPipe.prototype.getAttrDefault = function(attrId, data) {
      var count, maxCount, maxValue, obj, value, values, _i, _len, _name, _ref;
      values = {};
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        obj = data[_i];
        if (obj.attributes[attrId] != null) {
          if ((_ref = values[_name = obj.attributes[attrId]]) == null) {
            values[_name] = 0;
          }
          values[obj.attributes[attrId]] += 1;
        }
      }
      maxCount = 0;
      maxValue = null;
      for (value in values) {
        count = values[value];
        if (maxCount < count) {
          maxValue = value;
          maxCount = count;
        }
      }
      if (maxCount <= 10) {
        return null;
      }
      return maxValue;
    };

    WriteJsonProtoPipe.prototype.buildObsAttribute = function(attrId, msg, cache) {
      var attrObj, code, count, dim, i, maxCount, maxValue, series, size, val, valCount, value, values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
      attrObj = msg.attributes[attrId];
      attrObj.id = attrId;
      attrObj.name = this.getAttrName(attrId);
      attrObj.role = this.getAttrRole(attrId);
      attrObj.mandatory = this.getAttrMandatory(attrId);
      attrObj.codes = null;
      attrObj["default"] = null;
      values = {};
      _ref = cache.series;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        series = _ref[_i];
        if (series.obs.attributes[attrId] == null) {
          continue;
        }
        _ref1 = series.obs.obsDimension;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          val = _ref1[i];
          value = series.obs.attributes[attrId][i];
          if (value == null) {
            continue;
          }
          if ((_ref2 = values[value]) == null) {
            values[value] = 0;
          }
          values[value] += 1;
        }
      }
      if (this.attrIsCoded(attrId)) {
        attrObj.codes = {
          id: []
        };
        _ref3 = Object.keys(values).sort();
        for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
          code = _ref3[i];
          attrObj.codes.id[i] = code;
          attrObj.codes[code] = {
            id: code,
            index: i,
            name: this.getAttrCodeName(code, attrId)
          };
        }
      }
      if (attrObj.mandatory) {
        maxCount = 0;
        maxValue = null;
        for (value in values) {
          count = values[value];
          if (maxCount < count) {
            maxValue = value;
            maxCount = count;
          }
        }
        if (10 <= maxCount) {
          attrObj["default"] = maxValue;
        }
      }
      valCount = 0;
      for (value in values) {
        count = values[value];
        valCount += count;
      }
      if (attrObj["default"] != null) {
        valCount -= values[attrObj["default"]];
      }
      size = 1;
      _ref4 = attrObj.dimension;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        dim = _ref4[_l];
        size *= msg.dimensions[dim].codes.id.length;
      }
      if (valCount !== 0 && valCount < (size / 10)) {
        this.log.info("Storing " + attrId + " in object");
        return attrObj.value = {};
      } else {
        this.log.info("Storing " + attrId + " in array");
        return attrObj.value = [];
      }
    };

    WriteJsonProtoPipe.prototype.buildAttribute = function(attrId, attrObj, data, msg) {
      var code, codes, dim, i, index, key, multipliers, obj, prev, reversedDims, size, valCount, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _results;
      attrObj.id = attrId;
      attrObj.name = this.getAttrName(attrId);
      attrObj.mandatory = this.getAttrMandatory(attrId);
      attrObj.role = null;
      attrObj.codes = null;
      attrObj["default"] = null;
      if (attrObj.mandatory) {
        attrObj["default"] = this.getAttrDefault(attrId, data);
      }
      if (attrObj.dimension.length === 0) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          obj = data[_i];
          if (!(obj.attributes[attrId] != null)) {
            continue;
          }
          attrObj.value = obj.attributes[attrId];
          return;
        }
      }
      size = 1;
      _ref = attrObj.dimension;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        dim = _ref[_j];
        size *= msg.dimensions[dim].codes.id.length;
      }
      valCount = 0;
      for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
        obj = data[_k];
        if (!(obj.attributes[attrId] != null)) {
          continue;
        }
        if (obj.attributes[attrId] === attrObj["default"]) {
          continue;
        }
        valCount += 1;
      }
      if (valCount !== 0 && valCount < (size / 10)) {
        this.log.info("Storing " + attrId + " in object");
        attrObj.value = {};
      } else {
        this.log.info("Storing " + attrId + " in array");
        attrObj.value = [];
      }
      multipliers = {};
      reversedDims = attrObj.dimension.slice().reverse();
      prev = 1;
      for (_l = 0, _len3 = reversedDims.length; _l < _len3; _l++) {
        dim = reversedDims[_l];
        multipliers[dim] = prev;
        prev = msg.dimensions[dim].codes.id.length * prev;
      }
      for (_m = 0, _len4 = data.length; _m < _len4; _m++) {
        obj = data[_m];
        if (!(obj.attributes[attrId] != null)) {
          continue;
        }
        if (obj.attributes[attrId] === attrObj["default"]) {
          continue;
        }
        key = obj.seriesKey;
        if (key == null) {
          key = obj.groupKey;
        }
        index = 0;
        _ref1 = attrObj.dimension;
        for (i = _n = 0, _len5 = _ref1.length; _n < _len5; i = ++_n) {
          dim = _ref1[i];
          index += msg.dimensions[dim].codes[key[dim]].index * multipliers[dim];
        }
        attrObj.value[index] = obj.attributes[attrId];
      }
      if (this.attrIsCoded(attrId)) {
        attrObj.codes = {
          id: []
        };
        codes = {};
        if (attrObj["default"] != null) {
          codes[attrObj["default"]] = null;
        }
        for (i = _o = 0, _ref2 = attrObj.size - 1; 0 <= _ref2 ? _o <= _ref2 : _o >= _ref2; i = 0 <= _ref2 ? ++_o : --_o) {
          if (attrObj.value[i] != null) {
            codes[attrObj.value[i]] = null;
          }
        }
        _ref3 = Object.keys(codes).sort();
        _results = [];
        for (i = _p = 0, _len6 = _ref3.length; _p < _len6; i = ++_p) {
          code = _ref3[i];
          attrObj.codes.id.push(code);
          _results.push(attrObj.codes[code] = {
            id: code,
            index: i,
            name: this.getAttrCodeName(code, attrId)
          });
        }
        return _results;
      }
    };

    WriteJsonProtoPipe.prototype.buildDimension = function(dimId, dimObj, cache) {
      var code, codes, date, group, i, series, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      dimObj.id = dimId;
      dimObj.name = this.getDimName(dimId);
      dimObj.type = this.getDimType(dimId);
      dimObj.role = null;
      dimObj.codes = {
        id: []
      };
      codes = {};
      if (dimId === cache.obsDimension) {
        _ref = cache.series;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          series = _ref[_i];
          _ref1 = series.obs.obsDimension;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            code = _ref1[_j];
            if (code == null) {
              continue;
            }
            codes[code] = null;
          }
        }
      } else {
        _ref2 = cache.series;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          series = _ref2[_k];
          code = series.seriesKey[dimId];
          if (code == null) {
            continue;
          }
          codes[code] = null;
        }
        _ref3 = cache.groups;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          group = _ref3[_l];
          if (!(group.groupKey != null)) {
            continue;
          }
          code = group.groupKey[dimId];
          if (code == null) {
            continue;
          }
          codes[code] = null;
        }
      }
      _ref4 = Object.keys(codes).sort();
      for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
        code = _ref4[i];
        dimObj.codes.id[i] = code;
        dimObj.codes[code] = {
          id: code,
          name: this.getDimCodeName(code, dimId, dimObj.type),
          index: i
        };
      }
      if (dimObj.type === 'time') {
        _ref5 = dimObj.codes.id;
        _results = [];
        for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
          code = _ref5[_n];
          dimObj.codes[code].start = time.parseDate(dimObj.codes[code].id, false);
          date = time.parseDate(code, false);
          _results.push(dimObj.codes[code].end = time.parseDate(code, true));
        }
        return _results;
      }
    };

    WriteJsonProtoPipe.prototype.buildMeasure = function(measureId, msg, cache) {
      var code, codeCount, codeIndex, dim, i, index, key, obsIndex, prev, series, value, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = cache.series;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        series = _ref[_i];
        index = 0;
        prev = msg.dimensions[this.cache.obsDimension].codes.id.length;
        _ref1 = msg.dimensions.id.slice().reverse();
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          dim = _ref1[i];
          if (series.seriesKey[dim] == null) {
            continue;
          }
          codeIndex = msg.dimensions[dim].codes[series.seriesKey[dim]].index;
          codeCount = msg.dimensions[dim].codes.id.length;
          index += codeIndex * prev;
          prev = prev * codeCount;
        }
        _results.push((function() {
          var _k, _len2, _ref2, _results1;
          _ref2 = series.obs.obsDimension;
          _results1 = [];
          for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
            code = _ref2[i];
            obsIndex = index + msg.dimensions[this.cache.obsDimension].codes[code].index;
            if (typeof series.obs.obsValue[i] !== 'undefined') {
              if (isNaN(series.obs.obsValue[i])) {
                msg.measure[obsIndex] = '-';
              } else {
                msg.measure[obsIndex] = series.obs.obsValue[i];
              }
            }
            _results1.push((function() {
              var _ref3, _results2;
              _ref3 = series.obs.attributes;
              _results2 = [];
              for (key in _ref3) {
                value = _ref3[key];
                if (value[i] == null) {
                  continue;
                }
                if (value[i] !== msg.attributes[key]["default"]) {
                  _results2.push(msg.attributes[key].value[obsIndex] = value[i]);
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            })());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    WriteJsonProtoPipe.prototype.buildMessage = function() {
      var attr, attrObj, dim, i, msg, obsCount, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
      msg = {
        'sdmx-proto-json': '2012-09-13',
        name: this.header.name.en,
        id: this.header.id,
        test: this.header.test,
        prepared: this.header.prepared,
        measure: [],
        dimensions: {
          id: this.getDimIds()
        },
        attributes: null
      };
      this.log.info("starting to build data message");
      obsCount = 1;
      this.log.info("starting to process dimensions");
      _ref = msg.dimensions.id;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        dim = _ref[i];
        msg.dimensions[dim] = {};
        this.buildDimension(dim, msg.dimensions[dim], this.cache);
        obsCount *= msg.dimensions[dim].codes.id.length;
      }
      this.log.info("starting to process attributes");
      _ref1 = this.attributes;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        attr = _ref1[_j];
        if ((_ref2 = msg.attributes) == null) {
          msg.attributes = {
            id: []
          };
        }
        msg.attributes.id.push(attr);
        msg.attributes[attr] = {};
        attrObj = msg.attributes[attr];
        attrObj.dimension = this.getAttrDims(attr);
        if (attrObj.dimension.length === msg.dimensions.id.length - 1) {
          this.buildAttribute(attr, attrObj, this.cache.series, msg);
        } else {
          this.buildAttribute(attr, attrObj, this.cache.groups, msg);
        }
      }
      this.log.info("starting to process observation level attributes");
      _ref3 = this.obsAttributes;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        attr = _ref3[_k];
        if ((_ref4 = msg.attributes) == null) {
          msg.attributes = {
            id: []
          };
        }
        msg.attributes.id.push(attr);
        msg.attributes[attr] = {};
        msg.attributes[attr].dimension = msg.dimensions.id.slice();
        this.buildObsAttribute(attr, msg, this.cache);
      }
      this.log.info("starting to process measures");
      this.buildMeasure('OBS_VALUE', msg, this.cache);
      this.log.info('starting to produce JSON');
      this.emitData(JSON.stringify(msg));
      return this.log.info("finished building the data message");
    };

    return WriteJsonProtoPipe;

  })(sdmx.SdmxPipe);

  exports.WriteJsonProtoPipe = WriteJsonProtoPipe;

}).call(this);
