// Generated by CoffeeScript 1.3.1
(function() {
  var JSONWriter, SDMXToStringStream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  SDMXToStringStream = require('../sdmxStream').SDMXToStringStream;

  JSONWriter = (function(_super) {

    __extends(JSONWriter, _super);

    JSONWriter.name = 'JSONWriter';

    function JSONWriter() {
      return JSONWriter.__super__.constructor.apply(this, arguments);
    }

    JSONWriter.prototype.before = function(type, data) {
      switch (type) {
        case 'codelist':
        case 'conceptScheme':
        case 'dataStructure':
          return "\t\t\t\"" + data.agencyID + ":" + data.id + "(" + data.version + ")\": ";
        default:
          return '';
      }
    };

    JSONWriter.prototype.beforeNext = function(type) {
      switch (type) {
        case 'codelist':
        case 'conceptScheme':
        case 'dataStructure':
          return ',\n';
        case 'group':
        case 'series':
        case 'dataSetAttributes':
          return ',\n\t\t\t';
        default:
          return '';
      }
    };

    JSONWriter.prototype.beforeFirst = function(type) {
      var str;
      str = '';
      switch (type) {
        case 'end':
          if (0 < this.counters.dataSet) {
            str += '\n\t\t]';
          }
          if (0 < (this.counters.structure + this.counters.dataSet)) {
            str += '\n\t}';
          }
          str += '\n}';
          break;
        case 'header':
          str += '{\n\t"header": ';
          break;
        case 'codelist':
        case 'conceptScheme':
        case 'dataStructure':
          if (this.counters.structure === 0) {
            str += ',\n\t"structures": {\n';
          } else {
            str += ',\n';
          }
          switch (type) {
            case 'codelist':
              str += '\t\t"codelists": {\n';
              break;
            case 'conceptScheme':
              str += '\t\t"concepts": {\n';
              break;
            case 'dataStructure':
              str += '\t\t"dataStructures": {\n';
          }
          break;
        case 'dataSet':
          str += ',\n\t"dataSet": {\n\t';
          break;
        case 'group':
        case 'series':
        case 'dataSetAttributes':
          if (0 < (this.counters.group + this.counters.series + this.counters.dataSetAttributes)) {
            str += ',\n\t\t\t';
          }
      }
      return str;
    };

    JSONWriter.prototype.stringify = function(type, data) {
      switch (type) {
        case 'header':
          return this.toJSON(data);
        case 'codelist':
        case 'conceptScheme':
        case 'dataStructure':
          return this.toJSON(data, true, 3);
        case 'dataSet':
          return this.toJSON(data, false);
        case 'series':
        case 'group':
        case 'dataSetAttributes':
          return this.toJSON(data, true, 3);
        default:
          return '';
      }
    };

    JSONWriter.prototype.afterLast = function(type) {
      switch (type) {
        case 'codelist':
        case 'conceptScheme':
        case 'dataStructure':
          return '\n\t\t}';
        case 'dataSet':
          return ',\n\t\t"data": [\n\t\t\t';
        default:
          return '';
      }
    };

    JSONWriter.prototype.toJSON = function(data, withBraces, level) {
      var str;
      if (withBraces == null) {
        withBraces = true;
      }
      if (level == null) {
        level = 1;
      }
      if (!(data != null)) {
        return;
      }
      str = JSON.stringify(data, null, '\t');
      if (!withBraces) {
        str = str.slice(2, -2);
      }
      str = str.replace(/\n/g, '\n' + Array(level + 1).join('\t'));
      return str;
    };

    return JSONWriter;

  })(SDMXToStringStream);

  exports.JSONWriter = JSONWriter;

}).call(this);
