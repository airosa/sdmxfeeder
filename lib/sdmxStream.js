// Generated by CoffeeScript 1.3.1
(function() {
  var SDMXStream, SDMXToStringStream, Stream, StringToSDMXStream, sdmxArtefacts, sdmxData, sdmxStructures,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Stream = require('stream').Stream;

  sdmxArtefacts = {
    header: 0,
    dataStructure: 0,
    codelist: 0,
    conceptScheme: 0,
    dataSet: 0,
    dataSetAttributes: 0,
    series: 0,
    group: 0,
    query: 0
  };

  sdmxStructures = {
    dataStructure: 0,
    codelist: 0,
    conceptScheme: 0
  };

  sdmxData = {
    dataSetAttributes: 0,
    series: 0,
    group: 0
  };

  SDMXStream = (function(_super) {

    __extends(SDMXStream, _super);

    SDMXStream.name = 'SDMXStream';

    function SDMXStream(log) {
      var key;
      this.log = log;
      this.readable = true;
      this.writable = true;
      this.counters = {
        missing: 0,
        undefined: 0,
        unknown: 0,
        error: 0,
        structure: 0,
        data: 0
      };
      for (key in sdmxArtefacts) {
        this.counters[key] = 0;
      }
    }

    SDMXStream.prototype.count = function(data) {
      if (data != null) {
        if (data.type != null) {
          if (sdmxArtefacts[data.type] != null) {
            this.log.debug("" + this.constructor.name + " " + data.type);
            this.counters[data.type] += 1;
          } else {
            this.log.debug("" + this.constructor.name + " unknown " + data.type);
            this.counters.unknown += 1;
          }
        } else {
          this.log.debug("" + this.constructor.name + " undefined data.type");
          this.counters.undefined += 1;
        }
      } else {
        this.log.debug("" + this.constructor.name + " undefined data");
        this.counters.missing += 1;
      }
      if (sdmxStructures[data.type] != null) {
        this.counters.structure += 1;
      }
      if (sdmxData[data.type] != null) {
        return this.counters.data += 1;
      }
    };

    SDMXStream.prototype.write = function(data) {
      this.count(data);
      this.emit('data', data);
      return true;
    };

    SDMXStream.prototype.end = function() {
      this.readable = false;
      this.writable = false;
      return this.emit('end');
    };

    SDMXStream.prototype.destroy = function() {
      this.readable = false;
      this.writable = false;
      return this.emit('close');
    };

    return SDMXStream;

  })(Stream);

  StringToSDMXStream = (function(_super) {

    __extends(StringToSDMXStream, _super);

    StringToSDMXStream.name = 'StringToSDMXStream';

    function StringToSDMXStream(log) {
      this.log = log;
      this.write = __bind(this.write, this);

      this.readable = true;
      this.writable = true;
      this.sequenceNumber = 0;
      this.charsRead = 0;
      StringToSDMXStream.__super__.constructor.apply(this, arguments);
    }

    StringToSDMXStream.prototype.bufferToStr = function(data) {
      if (typeof data === 'string') {
        return data;
      } else {
        return data.toString('utf8');
      }
    };

    StringToSDMXStream.prototype.write = function(str) {
      this.charsRead += str.length;
      return true;
    };

    StringToSDMXStream.prototype.emitSDMX = function(type, artefact) {
      this.log.debug("" + this.constructor.name + " emit " + type);
      this.sequenceNumber += 1;
      return this.emit('data', {
        'type': type,
        'sequenceNumber': this.sequenceNumber,
        'data': artefact
      });
    };

    return StringToSDMXStream;

  })(SDMXStream);

  SDMXToStringStream = (function(_super) {

    __extends(SDMXToStringStream, _super);

    SDMXToStringStream.name = 'SDMXToStringStream';

    function SDMXToStringStream(log) {
      this.readable = true;
      this.writable = true;
      this.charsWritten = 0;
      this.previous = '';
      SDMXToStringStream.__super__.constructor.apply(this, arguments);
    }

    SDMXToStringStream.prototype.write = function(sdmxdata) {
      var current, data, str;
      current = sdmxdata.type;
      data = sdmxdata.data;
      str = '';
      if (this.previous === current) {
        str += this.beforeNext(current);
      } else {
        str += this.afterLast(this.previous);
        str += this.beforeFirst(current);
      }
      str += this.before(current, data);
      str += this.stringify(current, data);
      this.previous = current;
      this.count(sdmxdata);
      return this.emitStr(str);
    };

    SDMXToStringStream.prototype.end = function() {
      var str;
      str = '';
      str += this.afterLast(this.previous);
      str += this.beforeFirst('end');
      this.emitStr(str);
      return SDMXToStringStream.__super__.end.apply(this, arguments);
    };

    SDMXToStringStream.prototype.emitStr = function(str) {
      this.charsWritten += str.length;
      if (0 < str.length) {
        return this.emit('data', str);
      }
    };

    SDMXToStringStream.prototype.before = function(event, data) {
      return '';
    };

    SDMXToStringStream.prototype.beforeNext = function(event) {
      return '';
    };

    SDMXToStringStream.prototype.beforeFirst = function(event) {
      return '';
    };

    SDMXToStringStream.prototype.stringify = function(event, data) {
      return '';
    };

    SDMXToStringStream.prototype.afterLast = function(event) {
      return '';
    };

    return SDMXToStringStream;

  })(SDMXStream);

  exports.SDMXStream = SDMXStream;

  exports.StringToSDMXStream = StringToSDMXStream;

  exports.SDMXToStringStream = SDMXToStringStream;

}).call(this);
