// Generated by CoffeeScript 1.3.1
(function() {
  var ConvertCompactPipe, DebugPipe, GenericCheckPipe, MegaPipe, PipeFactory, ReadEdifactPipe, ReadXmlPipe, SubmitToRegistryPipe, WriteEdifactPipe, WriteJsonPipe, WriteXmlPipe;

  MegaPipe = require('./megaPipe').MegaPipe;

  ReadXmlPipe = require('../xml/readXmlPipe').ReadXmlPipe;

  WriteXmlPipe = require('../xml/writeXmlPipe').WriteXmlPipe;

  ReadEdifactPipe = require('../edifact/readEdifactPipe').ReadEdifactPipe;

  WriteEdifactPipe = require('../edifact/writeEdifactPipe').WriteEdifactPipe;

  WriteJsonPipe = require('../json/writeJsonPipe').WriteJsonPipe;

  SubmitToRegistryPipe = require('../registry/submitToRegistryPipe').SubmitToRegistryPipe;

  ConvertCompactPipe = require('../transform/convertCompactPipe').ConvertCompactPipe;

  GenericCheckPipe = require('../checks/genericCheckPipe').GenericCheckPipe;

  DebugPipe = require('../util/debugPipe').DebugPipe;

  PipeFactory = (function() {

    PipeFactory.name = 'PipeFactory';

    function PipeFactory() {}

    PipeFactory.prototype.build = function(pipes, options) {
      var n, name, subpipe, subpipes, _i, _len;
      subpipes = [];
      for (n = _i = 0, _len = pipes.length; _i < _len; n = ++_i) {
        name = pipes[n];
        subpipe = (function() {
          switch (name) {
            case 'XML':
              if (n === 0) {
                return new ReadXmlPipe(options.log);
              } else {
                return new WriteXmlPipe(options.log);
              }
              break;
            case 'EDI':
              if (n === 0) {
                return new ReadEdifactPipe(options.log);
              } else {
                return new WriteEdifactPipe(options.log);
              }
              break;
            case 'JSON':
              return new WriteJsonPipe(options.log);
            case 'submit':
              return new SubmitToRegistryPipe(options.log, options.registry);
            case 'convert':
              return new ConvertCompactPipe(options.log, options.registry);
            case 'check':
              return new GenericCheckPipe(options.log);
            case 'debug':
              return new DebugPipe(options.log);
            default:
              throw new Error("Invalid subpipe name: " + name);
          }
        })();
        subpipes.push(subpipe);
      }
      return new MegaPipe(options.log, subpipes);
    };

    return PipeFactory;

  })();

  exports.PipeFactory = PipeFactory;

}).call(this);
