// Generated by CoffeeScript 1.3.1
(function() {
  var ReadSdmxPipe, SdmxPipe, Stream, WriteSdmxPipe, sdmxArtefacts, sdmxData, sdmxStructures, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Stream = require('stream').Stream;

  util = require('util');

  exports.HEADER = 'header';

  exports.CODE_LIST = 'codelist';

  exports.CONCEPT_SCHEME = 'conceptscheme';

  exports.DATA_STRUCTURE_DEFINITION = 'datastructure';

  exports.DATA_SET_HEADER = 'datasetheader';

  exports.ATTRIBUTE_GROUP = 'group';

  exports.DATA_SET_ATTRIBUTES = 'datasetattributes';

  exports.SERIES = 'series';

  sdmxArtefacts = {
    header: 0,
    datastructure: 0,
    codelist: 0,
    conceptscheme: 0,
    datasetheader: 0,
    datasetattributes: 0,
    series: 0,
    group: 0,
    query: 0
  };

  sdmxStructures = {
    datastructure: 0,
    codelist: 0,
    conceptscheme: 0
  };

  sdmxData = {
    datasetattributes: 0,
    series: 0,
    group: 0
  };

  SdmxPipe = (function(_super) {

    __extends(SdmxPipe, _super);

    SdmxPipe.name = 'SdmxPipe';

    function SdmxPipe(log) {
      this.log = log;
      this.queueLengthMax = 1000;
      this.readable = true;
      this.writable = true;
      this.paused = false;
      this.waiting = false;
      this.queue = {};
      this.counters = {};
      this._init();
      SdmxPipe.__super__.constructor.apply(this, arguments);
    }

    SdmxPipe.prototype.write = function(data) {
      this.log.debug("" + this.constructor.name + " write " + (data.type != null ? data.type : data.length));
      this.counters.write += 1;
      this._count('in', data);
      if (!this.writable) {
        throw new Error("" + this.constructor.name + " write after end");
      }
      return this.processData(data);
    };

    SdmxPipe.prototype.end = function() {
      this.log.debug("" + this.constructor.name + " end");
      this.counters.end += 1;
      this.writable = false;
      this.processEnd();
      return this._pushToQueue('end');
    };

    SdmxPipe.prototype.pause = function() {
      this.log.debug("" + this.constructor.name + " pause");
      this.counters.pause += 1;
      return this.paused = true;
    };

    SdmxPipe.prototype.resume = function() {
      this.log.debug("" + this.constructor.name + " resume");
      this.counters.resume += 1;
      this.paused = false;
      return this._drain();
    };

    SdmxPipe.prototype.xpipex = function(destination) {
      util.pump(this, destination, function(err) {
        if (!err) {
          return destination.end();
        }
      });
      return destination;
    };

    SdmxPipe.prototype.processData = function(data) {
      this.log.debug("" + this.constructor.name + " processData (default)");
      return this.emitData(data);
    };

    SdmxPipe.prototype.processEnd = function() {
      return this.log.debug("" + this.constructor.name + " processEnd");
    };

    SdmxPipe.prototype.emitData = function(data) {
      this.log.debug("" + this.constructor.name + " emitData");
      if (data != null) {
        this._count('out', data);
      }
      return this._pushToQueue('data', data);
    };

    SdmxPipe.prototype._init = function() {
      var key, _results;
      this.queue = {
        "in": [],
        out: []
      };
      this.counters = {
        write: 0,
        emit: 0,
        end: 0,
        pause: 0,
        resume: 0,
        wait: 0,
        "continue": 0,
        error: 0,
        "in": {
          missing: 0,
          unknown: 0,
          structure: 0,
          data: 0,
          objects: 0,
          chars: 0
        },
        out: {}
      };
      for (key in sdmxArtefacts) {
        this.counters["in"][key] = 0;
      }
      _results = [];
      for (key in this.counters["in"]) {
        _results.push(this.counters.out[key] = 0);
      }
      return _results;
    };

    SdmxPipe.prototype._pushToQueue = function(event, arg) {
      this.log.debug("" + this.constructor.name + " pushToQueue " + event);
      this.queue.out.push({
        name: event,
        arg: arg
      });
      return this._drain();
    };

    SdmxPipe.prototype._drain = function() {
      var event, isFull, wasFull;
      this.log.debug("" + this.constructor.name + " drain");
      wasFull = this.queueLengthMax < this.queue.out.length;
      while (0 < this.queue.out.length && !this.paused) {
        event = this.queue.out.shift();
        this.log.debug("" + this.constructor.name + " emit " + event.name);
        this.counters.emit += 1;
        this.emit(event.name, event.arg);
      }
      isFull = this.queueLengthMax < this.queue.out.length;
      if (isFull) {
        return false;
      } else {
        if (wasFull) {
          this.log.debug("" + this.constructor.name + " emit drain");
          this.emit('drain');
        }
        return true;
      }
    };

    SdmxPipe.prototype._count = function(direction, data) {
      if (data != null) {
        if (this.counters[direction][data.type] != null) {
          this.counters[direction][data.type] += 1;
        }
        if (this.counters[direction][data.type] == null) {
          this.counters[direction].unknown += 1;
        }
        if (sdmxStructures[data.type] != null) {
          this.counters[direction].structure += 1;
        }
        if (sdmxData[data.type] != null) {
          this.counters[direction].data += 1;
        }
        if (this.counters[direction][data.type] != null) {
          this.counters[direction].objects += 1;
        }
        if (data.length != null) {
          return this.counters[direction].chars += data.length;
        }
      } else {
        return this.counters[direction].missing += 1;
      }
    };

    return SdmxPipe;

  })(Stream);

  ReadSdmxPipe = (function(_super) {

    __extends(ReadSdmxPipe, _super);

    ReadSdmxPipe.name = 'ReadSdmxPipe';

    function ReadSdmxPipe(log) {
      this.sequenceNumber = 0;
      ReadSdmxPipe.__super__.constructor.apply(this, arguments);
    }

    ReadSdmxPipe.prototype.bufferToStr = function(data) {
      if (typeof data === 'string') {
        return data;
      } else {
        return data.toString('utf8');
      }
    };

    ReadSdmxPipe.prototype.emitSDMX = function(type, artefact) {
      this.sequenceNumber += 1;
      return this.emitData({
        type: type,
        sequenceNumber: this.sequenceNumber,
        data: artefact
      });
    };

    return ReadSdmxPipe;

  })(SdmxPipe);

  WriteSdmxPipe = (function(_super) {

    __extends(WriteSdmxPipe, _super);

    WriteSdmxPipe.name = 'WriteSdmxPipe';

    function WriteSdmxPipe(log) {
      this.previous = '';
      WriteSdmxPipe.__super__.constructor.apply(this, arguments);
    }

    WriteSdmxPipe.prototype.processData = function(sdmxdata) {
      var current, data, str;
      this.log.debug("" + this.constructor.name + " processData");
      current = sdmxdata.type;
      data = sdmxdata.data;
      str = '';
      if (this.previous === current) {
        str += this.beforeNext(current);
      } else {
        str += this.afterLast(this.previous);
        str += this.beforeFirst(current, data);
      }
      str += this.before(current, data);
      str += this.stringify(current, data);
      this.previous = current;
      return this.emitData(str);
    };

    WriteSdmxPipe.prototype.processEnd = function() {
      var current, str;
      this.log.debug("" + this.constructor.name + " processEnd");
      current = 'end';
      str = '';
      if (this.previous === current) {
        str += this.beforeNext('end');
      } else {
        str += this.afterLast(this.previous);
        str += this.beforeFirst(current);
      }
      this.previous = current;
      return this.emitData(str);
    };

    WriteSdmxPipe.prototype.before = function(event, data) {
      return '';
    };

    WriteSdmxPipe.prototype.beforeNext = function(event) {
      return '';
    };

    WriteSdmxPipe.prototype.beforeFirst = function(event, data) {
      return '';
    };

    WriteSdmxPipe.prototype.stringify = function(event, data) {
      return '';
    };

    WriteSdmxPipe.prototype.afterLast = function(event) {
      return '';
    };

    return WriteSdmxPipe;

  })(SdmxPipe);

  exports.SdmxPipe = SdmxPipe;

  exports.ReadSdmxPipe = ReadSdmxPipe;

  exports.WriteSdmxPipe = WriteSdmxPipe;

}).call(this);
