// Generated by CoffeeScript 1.3.1
(function() {
  var EDIFACTReader, EdifactLexer, EdifactParser, StringToSDMXStream, actions,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  StringToSDMXStream = require('../sdmxStream').StringToSDMXStream;

  EdifactParser = require('./parser').EdifactParser;

  EdifactLexer = require('./lexer').EdifactLexer;

  actions = require('./actions');

  EDIFACTReader = (function(_super) {

    __extends(EDIFACTReader, _super);

    EDIFACTReader.name = 'EDIFACTReader';

    function EDIFACTReader(log, stream) {
      this.onSegment = __bind(this.onSegment, this);

      this.write = __bind(this.write, this);
      this.lexer = new EdifactLexer(this.onSegment);
      this.stream = {};
      this.pathStack = [];
      this.path = '';
      this.segmentCount = 0;
      this.messageCount = 0;
      this.tooManyErrors = false;
      this.helper = {};
      this.messageBegin = {};
      this.codelist = {};
      this.conceptScheme = {};
      this.dsd = {};
      this.component = {};
      this.dataSetBegin = {};
      this.header = {};
      this.series = {};
      this.attributes = {};
      EDIFACTReader.__super__.constructor.apply(this, arguments);
    }

    EDIFACTReader.prototype.write = function(data) {
      this.lexer.tokenize(data);
      return EDIFACTReader.__super__.write.apply(this, arguments);
    };

    EDIFACTReader.prototype.onSegment = function(seg) {
      var parser, path, tagName;
      parser = new EdifactParser(seg);
      tagName = parser.tag();
      this.segmentCount += 1;
      this.pathStack.push(tagName);
      path = this.pathStack.join('/');
      if (actions.fst[path]) {
        if (actions.guards[path] != null) {
          actions.guards[path].call(this, parser);
        }
        if (actions.entryActions[path] != null) {
          actions.entryActions[path].call(this, parser, {});
        }
        return;
      }
      while (1 < this.pathStack.length) {
        this.pathStack.pop();
        path = this.pathStack.join('/');
        if (actions.exitActions[path] != null) {
          actions.exitActions[path].call(this, {});
        }
        this.pathStack.pop();
        this.pathStack.push(tagName);
        path = this.pathStack.join('/');
        if (actions.fst[path]) {
          if (actions.guards[path] != null) {
            actions.guards[path].call(this, parser);
          }
          if (actions.entryActions[path] != null) {
            actions.entryActions[path].call(this, parser, {});
          }
          return;
        }
      }
      return this.log.error("Invalid tag " + tagName + " in segment " + seg);
    };

    return EDIFACTReader;

  })(StringToSDMXStream);

  exports.EDIFACTReader = EDIFACTReader;

}).call(this);
