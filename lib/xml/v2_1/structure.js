// Generated by CoffeeScript 1.3.1
(function() {
  var codeCur, codeListCur, componentCur, conceptCur, conceptSchemeCur, dataStructureCur, dimensionPos, entryActions, exitActions, guards, header, util, _;

  _ = require('underscore');

  header = require('./header');

  util = require('../../util/util');

  codeListCur = {};

  codeCur = {};

  conceptSchemeCur = {};

  conceptCur = {};

  dataStructureCur = {};

  componentCur = {};

  dimensionPos = 0;

  entryActions = {
    'Structures/Codelists': function(attrs) {},
    'Structures/Codelists/Codelist': function(attrs) {
      codeListCur = _.extend({}, attrs);
      if (codeListCur.isPartial != null) {
        return codeListCur.isPartial = codeListCur.isPartial === 'true';
      }
    },
    'Structures/Codelists/Codelist/Code': function(attrs) {
      return codeCur = _.extend({}, attrs);
    },
    'Structures/Concepts/ConceptScheme': function(attrs) {
      conceptSchemeCur = _.extend({}, attrs);
      if (conceptSchemeCur.isPartial != null) {
        return conceptSchemeCur.isPartial = conceptSchemeCur.isPartial === 'true';
      }
    },
    'Structures/Concepts/ConceptScheme/Concept': function(attrs) {
      return conceptCur = _.extend({}, attrs);
    },
    'Structures/DataStructures/DataStructure': function(attrs) {
      dataStructureCur = _.extend({}, attrs);
      return dimensionPos = 0;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/DimensionList/Dimension': function(attrs) {
      componentCur = _.extend({}, attrs);
      dimensionPos += 1;
      componentCur.order = dimensionPos;
      return componentCur.type = 'dimension';
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/DimensionList/TimeDimension': function(attrs) {
      componentCur = _.extend({}, attrs);
      dimensionPos += 1;
      componentCur.order = dimensionPos;
      return componentCur.type = 'timeDimension';
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/Group': function(attrs) {
      return componentCur = _.extend({}, attrs);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/Group/GroupDimension/DimensionReference/Ref': function(attrs) {
      if (componentCur.dimension == null) {
        componentCur.dimension = [];
      }
      return componentCur.dimension.push(attrs.id);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/AttributeList/Attribute': function(attrs) {
      return componentCur = _.extend({}, attrs);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/AttributeList/Attribute/AttributeRelationship/Dimension/Ref': function(attrs) {
      var _base;
      if (componentCur.attributeRelationship == null) {
        componentCur.attributeRelationship = {};
      }
      if ((_base = componentCur.attributeRelationship).dimension == null) {
        _base.dimension = [];
      }
      return componentCur.attributeRelationship.dimension.push(attrs.id);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/AttributeList/Attribute/AttributeRelationship/Group/Ref': function(attrs) {
      if (componentCur.attributeRelationship == null) {
        componentCur.attributeRelationship = {};
      }
      return componentCur.attributeRelationship.group = attrs.id;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/AttributeList/Attribute/AttributeRelationship/PrimaryMeasure/Ref': function(attrs) {
      if (componentCur.attributeRelationship == null) {
        componentCur.attributeRelationship = {};
      }
      return componentCur.attributeRelationship.primaryMeasure = attrs.id;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/MeasureList/PrimaryMeasure': function(attrs) {
      return componentCur = _.extend({}, attrs);
    }
  };

  exitActions = {
    'Structures/Codelists/Codelist': function(attrs) {
      return this.emitSDMX('codelist', codeListCur);
    },
    'Structures/Codelists/Codelist/Code': function(attrs) {
      if (codeListCur.codes == null) {
        codeListCur.codes = {};
      }
      return codeListCur.codes[codeCur.id] = codeCur.Name;
    },
    'Structures/Codelists/Codelist/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (codeListCur.name == null) {
        codeListCur.name = {};
      }
      return codeListCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/Codelists/Codelist/Description': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (codeListCur.description == null) {
        codeListCur.description = {};
      }
      return codeListCur.description[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/Codelists/Codelist/Code/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (codeCur.name == null) {
        codeCur.name = {};
      }
      return codeCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/Codelists/Codelist/Code/Description': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (codeCur.description == null) {
        codeCur.description = {};
      }
      return codeCur.description[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/Concepts/ConceptScheme': function(attrs) {
      return this.emitSDMX('conceptScheme', conceptSchemeCur);
    },
    'Structures/Concepts/ConceptScheme/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (conceptSchemeCur.name == null) {
        conceptSchemeCur.name = {};
      }
      return conceptSchemeCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/Concepts/ConceptScheme/Concept': function() {
      if (conceptSchemeCur.concepts == null) {
        conceptSchemeCur.concepts = {};
      }
      return conceptSchemeCur.concepts[conceptCur.id] = conceptCur;
    },
    'Structures/Concepts/ConceptScheme/Concept/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (conceptCur.name == null) {
        conceptCur.name = {};
      }
      return conceptCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/Concepts/ConceptScheme/Concept/Description': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (conceptCur.description == null) {
        conceptCur.description = {};
      }
      return conceptCur.description[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/DataStructures/DataStructure': function(attrs) {
      return this.emitSDMX('dataStructure', dataStructureCur);
    },
    'Structures/DataStructures/DataStructure/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (dataStructureCur.name == null) {
        dataStructureCur.name = {};
      }
      return dataStructureCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/DimensionList/Dimension': function() {
      if (dataStructureCur.dimensionDescriptor == null) {
        dataStructureCur.dimensionDescriptor = {};
      }
      return dataStructureCur.dimensionDescriptor[componentCur.id] = componentCur;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/DimensionList/TimeDimension': function() {
      if (dataStructureCur.dimensionDescriptor == null) {
        dataStructureCur.dimensionDescriptor = {};
      }
      return dataStructureCur.dimensionDescriptor[componentCur.id] = componentCur;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/DimensionList/Dimension/ConceptIdentity/URN': function() {
      var _base, _ref;
      if (componentCur.conceptIdentity == null) {
        componentCur.conceptIdentity = {};
      }
      return (_ref = (_base = componentCur.conceptIdentity).ref) != null ? _ref : _base.ref = this.parseURN(this.stringBuffer);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/DimensionList/TimeDimension/ConceptIdentity/URN': function() {
      var _base, _ref;
      if (componentCur.conceptIdentity == null) {
        componentCur.conceptIdentity = {};
      }
      return (_ref = (_base = componentCur.conceptIdentity).ref) != null ? _ref : _base.ref = this.parseURN(this.stringBuffer);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/Group': function() {
      if (dataStructureCur.dimensionGroupDescriptor == null) {
        dataStructureCur.dimensionGroupDescriptor = {};
      }
      return dataStructureCur.dimensionGroupDescriptor[componentCur.id] = componentCur;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/AttributeList/Attribute': function() {
      if (dataStructureCur.attributeDescriptor == null) {
        dataStructureCur.attributeDescriptor = {};
      }
      return dataStructureCur.attributeDescriptor[componentCur.id] = componentCur;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/AttributeList/Attribute/ConceptIdentity/URN': function() {
      var _base, _ref;
      if (componentCur.conceptIdentity == null) {
        componentCur.conceptIdentity = {};
      }
      return (_ref = (_base = componentCur.conceptIdentity).ref) != null ? _ref : _base.ref = this.parseURN(this.stringBuffer);
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/MeasureList/PrimaryMeasure': function() {
      if (dataStructureCur.measureDescriptor == null) {
        dataStructureCur.measureDescriptor = {};
      }
      return dataStructureCur.measureDescriptor.primaryMeasure = componentCur;
    },
    'Structures/DataStructures/DataStructure/DataStructureComponents/MeasureList/PrimaryMeasure/ConceptIdentity/URN': function() {
      var _base;
      if (componentCur.conceptIdentity == null) {
        componentCur.conceptIdentity = {};
      }
      if ((_base = componentCur.conceptIdentity).ref == null) {
        _base.ref = this.parseURN(this.stringBuffer);
      }
      return componentCur.id = componentCur.conceptIdentity.ref.id;
    }
  };

  guards = {};

  exports.fst = _.extend({}, header.fst, entryActions, exitActions, guards);

  exports.entryActions = _.defaults(entryActions, header.entryActions);

  exports.exitActions = _.defaults(exitActions, header.exitActions);

  exports.guards = _.defaults(guards, header.guards);

}).call(this);
