// Generated by CoffeeScript 1.3.1
(function() {
  var convertKeysToDates, convertKeysToNumbers, dataSetCur, deleteKeys, entryActions, exitActions, groupCur, guards, header, sdmx, seriesCur, util, xmlns_gen, xmlns_msg, _;

  _ = require('underscore');

  header = require('./header');

  sdmx = require('../../pipe/sdmxPipe');

  util = require('../../util/util');

  xmlns_msg = 'http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message';

  xmlns_gen = 'http://www.SDMX.org/resources/SDMXML/schemas/v2_0/generic';

  dataSetCur = {};

  seriesCur = {};

  groupCur = {};

  convertKeysToDates = function(obj, keys) {
    var key, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (obj[key] != null) {
        _results.push(obj[key] = util.xmlDateToJavascriptDate(obj[key]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  convertKeysToNumbers = function(obj, keys) {
    var key, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (obj[key] != null) {
        _results.push(obj[key] = Number(obj[key]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  deleteKeys = function(obj, keys) {
    var key, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      _results.push(delete obj[key]);
    }
    return _results;
  };

  entryActions = {
    'DataSet': function(attrs) {
      dataSetCur = _.extend({}, attrs);
      convertKeysToDates(dataSetCur, ['reportingBeginDate', 'reportingEndDate', 'validFromDate', 'validToDate']);
      convertKeysToNumbers(dataSetCur, ['publicationYear']);
      deleteKeys(dataSetCur, ['xmlns']);
      return this.emitSDMX(sdmx.DATA_SET_HEADER, dataSetCur);
    },
    'DataSet/Group': function(attrs) {
      return groupCur = _.extend({}, attrs);
    },
    'DataSet/Group/GroupKey/Value': function(attrs) {
      if (groupCur.groupKey == null) {
        groupCur.groupKey = {};
      }
      return groupCur.groupKey[attrs.id] = attrs.value;
    },
    'DataSet/Group/Attributes/Value': function(attrs) {
      if (groupCur.attributes == null) {
        groupCur.attributes = {};
      }
      return groupCur.attributes[attrs.id] = attrs.value;
    },
    'DataSet/Group/Series': function() {
      return seriesCur = {
        seriesKey: {},
        obs: {
          obsDimension: [],
          obsValue: [],
          attributes: {}
        }
      };
    },
    'DataSet/Group/Series/SeriesKey/Value': function(attrs) {
      return seriesCur.seriesKey[attrs.id] = attrs.value;
    },
    'DataSet/Group/Series/Attributes/Value': function(attrs) {
      if (seriesCur.attributes == null) {
        seriesCur.attributes = {};
      }
      return seriesCur.attributes[attrs.id] = attrs.value;
    },
    'DataSet/Group/Series/Obs/ObsValue': function(attrs) {
      return seriesCur.obs.obsValue.push(Number(attrs.value));
    },
    'DataSet/Group/Series/Obs/Attributes/Value': function(attrs) {
      var _base, _name;
      if ((_base = seriesCur.obs.attributes)[_name = attrs.id] == null) {
        _base[_name] = [];
      }
      return seriesCur.obs.attributes[attrs.id].push(attrs.value);
    },
    'DataSet/Group/Series/Obs/ObsDimension': function(attrs) {
      return seriesCur.obs.obsDimension.push(attrs.value);
    }
  };

  entryActions['DataSet/Series'] = entryActions['DataSet/Group/Series'];

  entryActions['DataSet/Series/SeriesKey/Value'] = entryActions['DataSet/Group/Series/SeriesKey/Value'];

  entryActions['DataSet/Series/Attributes/Value'] = entryActions['DataSet/Group/Series/Attributes/Value'];

  entryActions['DataSet/Series/Obs/ObsValue'] = entryActions['DataSet/Group/Series/Obs/ObsValue'];

  entryActions['DataSet/Series/Obs/Attributes/Value'] = entryActions['DataSet/Group/Series/Obs/Attributes/Value'];

  entryActions['DataSet/Series/Obs/ObsDimension'] = entryActions['DataSet/Group/Series/Obs/ObsDimension'];

  exitActions = {
    'DataSet': function() {
      return this.emitSDMX('end', '');
    },
    'DataSet/Group': function() {
      return this.emitSDMX(sdmx.ATTRIBUTE_GROUP, groupCur);
    },
    'DataSet/Group/Series': function() {
      return this.emitSDMX(sdmx.SERIES, seriesCur);
    }
  };

  exitActions['DataSet/Series'] = exitActions['DataSet/Group/Series'];

  guards = {};

  exports.fst = _.extend({}, header.fst, entryActions, exitActions, guards);

  exports.entryActions = _.defaults(entryActions, header.entryActions);

  exports.exitActions = _.defaults(exitActions, header.exitActions);

  exports.guards = _.defaults(guards, header.guards);

}).call(this);
