// Generated by CoffeeScript 1.3.1
(function() {
  var entryActions, exitActions, groupCur, guards, header, sdmx, seriesCur, xmlns_msg, _;

  _ = require('underscore');

  header = require('./header');

  sdmx = require('../../pipe/sdmxPipe');

  xmlns_msg = 'http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message';

  seriesCur = {};

  groupCur = {};

  entryActions = {
    'DataSet': function(attrs) {
      return this.emitSDMX(sdmx.DATA_SET_HEADER, _.extend({}, attrs));
    },
    'DataSet/Series': function(attrs) {
      seriesCur = {};
      return seriesCur.components = _.extend({}, attrs);
    },
    'DataSet/Series/Obs': function(attrs) {
      var key, value, _base, _base1, _base2, _base3, _results;
      if (seriesCur.obs == null) {
        seriesCur.obs = {};
      }
      if ((_base = seriesCur.obs).obsDimension == null) {
        _base.obsDimension = [];
      }
      if ((_base1 = seriesCur.obs).obsValue == null) {
        _base1.obsValue = [];
      }
      if ((_base2 = seriesCur.obs).attributes == null) {
        _base2.attributes = {};
      }
      _results = [];
      for (key in attrs) {
        value = attrs[key];
        switch (key) {
          case 'TIME_PERIOD':
            _results.push(seriesCur.obs.obsDimension.push(value));
            break;
          case 'OBS_VALUE':
            _results.push(seriesCur.obs.obsValue.push(Number(value)));
            break;
          default:
            if ((_base3 = seriesCur.obs.attributes)[key] == null) {
              _base3[key] = [];
            }
            _results.push(seriesCur.obs.attributes[key].push(value));
        }
      }
      return _results;
    },
    'DataSet/Group': function(attrs) {
      groupCur = {
        type: 'SiblingGroup'
      };
      groupCur.components = _.extend({}, attrs);
      return this.emitSDMX(sdmx.ATTRIBUTE_GROUP, groupCur);
    }
  };

  entryActions['DataSet/SiblingGroup'] = entryActions['DataSet/Group'];

  exitActions = {
    'DataSet/Series': function() {
      return this.emitSDMX(sdmx.SERIES, seriesCur);
    }
  };

  guards = {};

  exports.fst = _.extend({}, header.fst, entryActions, exitActions, guards);

  exports.entryActions = _.defaults(entryActions, header.entryActions);

  exports.exitActions = _.defaults(exitActions, header.exitActions);

  exports.guards = _.defaults(guards, header.guards);

}).call(this);
