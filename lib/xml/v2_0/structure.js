// Generated by CoffeeScript 1.3.1
(function() {
  var addConceptIdentity, addEnumeration, addTextFormat, attributeCur, codeCur, codeListCur, comp, conceptCur, conceptSchemeTmp, conceptsCur, dimensionPos, dsdCur, entryActions, exitActions, groupCur, guards, header, keyFamilyCur, primaryMeasureCur, renameProperty, _;

  _ = require('underscore');

  header = require('./header');

  codeListCur = {};

  codeCur = {};

  conceptsCur = {};

  conceptCur = {};

  keyFamilyCur = {};

  dimensionPos = 1;

  attributeCur = {};

  groupCur = {};

  primaryMeasureCur = {};

  conceptSchemeTmp = {};

  dsdCur = {};

  comp = {};

  renameProperty = function(obj, oldName, newName) {
    if (obj.hasOwnProperty(oldName) && !obj.hasOwnProperty(newName)) {
      obj[newName] = obj[oldName];
      return delete obj[oldName];
    }
  };

  addConceptIdentity = function(component, attrs) {
    component.conceptIdentity = {};
    component.id = attrs.concept != null ? attrs.concept : attrs.conceptRef;
    component.conceptIdentity.ref = {};
    component.conceptIdentity.ref.id = attrs.concept != null ? attrs.concept : attrs.conceptRef;
    component.conceptIdentity.ref.agencyID = attrs.conceptAgency != null ? attrs.conceptAgency : dsdCur.agencyID;
    component.conceptIdentity.ref.maintainableParentID = 'CONCEPTS';
    if (attrs.conceptVersion != null) {
      return component.conceptIdentity.ref.maintainableParentVersion = attrs.conceptVersion;
    }
  };

  addEnumeration = function(component, attrs) {
    if (attrs.codelist == null) {
      return;
    }
    if (component.localRepresentation == null) {
      component.localRepresentation = {};
    }
    component.localRepresentation.enumeration = {};
    component.localRepresentation.enumeration.ref = {};
    component.localRepresentation.enumeration.ref.id = attrs.codelist;
    component.localRepresentation.enumeration.ref.agencyID = attrs.codelistAgency != null ? attrs.codelistAgency : dsdCur.agencyID;
    if (attrs.codelistVersion != null) {
      return component.localRepresentation.enumeration.ref.version = attrs.codelistVersion;
    }
  };

  addTextFormat = function(component, attrs) {
    var _base;
    if (component.localRepresentation == null) {
      component.localRepresentation = {};
    }
    if ((_base = component.localRepresentation).textFormat == null) {
      _base.textFormat = {};
    }
    component.localRepresentation.textFormat.textType = (function() {
      switch (attrs.textType) {
        case 'Double':
          return 'Numeric';
        default:
          return 'AlphaNumeric';
      }
    })();
    if (attrs.minLength != null) {
      component.localRepresentation.textFormat.minLength = +attrs.minLength;
    }
    if (attrs.maxLength != null) {
      return component.localRepresentation.textFormat.maxLength = +attrs.maxLength;
    }
  };

  entryActions = {
    'CodeLists': function(attrs) {},
    'CodeLists/CodeList': function(attrs) {
      codeListCur = _.extend({}, attrs);
      this.convertBool(codeListCur, 'isFinal');
      return renameProperty(codeListCur, 'agency', 'agencyID');
    },
    'CodeLists/CodeList/Code': function(attrs) {
      codeCur = _.extend({}, attrs);
      return renameProperty(codeCur, 'value', 'id');
    },
    'Concepts': function(attrs) {
      return conceptSchemeTmp = {};
    },
    'Concepts/Concept': function(attrs) {
      if (conceptSchemeTmp.id == null) {
        conceptSchemeTmp.id = 'CONCEPTS';
      }
      if (!(conceptSchemeTmp.agencyID != null) && (attrs.agency != null)) {
        conceptSchemeTmp.agencyID = attrs.agency;
      }
      if (!(conceptSchemeTmp.agencyID != null) && (attrs.agencyID != null)) {
        conceptSchemeTmp.agencyID = attrs.agencyID;
      }
      if (conceptSchemeTmp.name == null) {
        conceptSchemeTmp.name = {};
      }
      if (conceptSchemeTmp.name.en == null) {
        conceptSchemeTmp.name.en = 'Statistical concepts';
      }
      if (conceptSchemeTmp.concepts == null) {
        conceptSchemeTmp.concepts = {};
      }
      conceptCur = {};
      conceptCur.id = attrs.id;
      return conceptCur.uri = attrs.uri;
    },
    'KeyFamilies/KeyFamily': function(attrs) {
      dsdCur = {};
      if (attrs.id != null) {
        dsdCur.id = attrs.id;
      }
      dsdCur.agencyID = attrs.agency != null ? attrs.agency : attrs.agencyID;
      if (attrs.version != null) {
        dsdCur.version = attrs.version;
      }
      dsdCur.measureDescriptor = {};
      dimensionPos = 1;
      return this.dimensions = [];
    },
    'KeyFamilies/KeyFamily/Components/PrimaryMeasure': function(attrs) {
      comp = {};
      addConceptIdentity(comp, attrs);
      return this.primaryMeasureID = attrs.concept != null ? attrs.concept : attrs.conceptRef;
    },
    'KeyFamilies/KeyFamily/Components/Dimension': function(attrs) {
      comp = {};
      addConceptIdentity(comp, attrs);
      comp.order = dimensionPos;
      comp.type = 'dimension';
      if ((attrs.isMeasureDimension != null) && attrs.isMeasureDimension === 'true') {
        comp.type = 'measureDimension';
      }
      addEnumeration(comp, attrs);
      dimensionPos += 1;
      return this.dimensions.push(attrs.concept != null ? attrs.concept : attrs.conceptRef);
    },
    'KeyFamilies/KeyFamily/Components/TimeDimension': function(attrs) {
      comp = {};
      addConceptIdentity(comp, attrs);
      comp.order = dimensionPos;
      comp.type = 'timeDimension';
      return dimensionPos += 1;
    },
    'KeyFamilies/KeyFamily/Components/Attribute': function(attrs) {
      comp = {};
      comp.assignmentStatus = attrs.assignmentStatus;
      addConceptIdentity(comp, attrs);
      addEnumeration(comp, attrs);
      comp.attributeRelationship = {};
      if (attrs.attachmentLevel === 'Observation') {
        comp.attributeRelationship.primaryMeasure = this.primaryMeasureID;
      }
      if (attrs.attachmentLevel === 'Series') {
        return comp.attributeRelationship.dimensions = this.dimensions;
      }
    },
    'KeyFamilies/KeyFamily/Components/Attribute/TextFormat': function(attrs) {
      return addTextFormat(comp, attrs);
    },
    'KeyFamilies/KeyFamily/Components/Group': function(attrs) {
      comp = {};
      return comp.id = attrs.id;
    },
    'KeyFamilies/KeyFamily/Components/PrimaryMeasure/TextFormat': function(attrs) {
      return addTextFormat(comp, attrs);
    }
  };

  exitActions = {
    'CodeLists/CodeList': function(attrs) {
      return this.emitSDMX('codelist', codeListCur);
    },
    'CodeLists/CodeList/Code': function(attrs) {
      if (codeListCur.codes == null) {
        codeListCur.codes = {};
      }
      return codeListCur.codes[codeCur.id] = codeCur;
    },
    'CodeLists/CodeList/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (codeListCur.name == null) {
        codeListCur.name = {};
      }
      return codeListCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'CodeLists/CodeList/Code/Description': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (codeCur.name == null) {
        codeCur.name = {};
      }
      return codeCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'Concepts/Concept': function(attrs) {
      return conceptSchemeTmp.concepts[conceptCur.id] = conceptCur;
    },
    'Concepts': function(attrs) {
      return this.emitSDMX('conceptScheme', conceptSchemeTmp);
    },
    'Concepts/Concept/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (conceptCur.name == null) {
        conceptCur.name = {};
      }
      return conceptCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'KeyFamilies/KeyFamily': function(attrs) {
      return this.emitSDMX('dataStructure', dsdCur);
    },
    'KeyFamilies/KeyFamily/Name': function(attrs) {
      if (attrs['xml:lang'] == null) {
        attrs['xml:lang'] = 'en';
      }
      if (dsdCur.name == null) {
        dsdCur.name = {};
      }
      return dsdCur.name[attrs['xml:lang']] = this.stringBuffer;
    },
    'KeyFamilies/KeyFamily/Components/Dimension': function(attrs) {
      if (dsdCur.dimensionDescriptor == null) {
        dsdCur.dimensionDescriptor = {};
      }
      return dsdCur.dimensionDescriptor[comp.id] = comp;
    },
    'KeyFamilies/KeyFamily/Components/TimeDimension': function(attrs) {
      if (dsdCur.dimensionDescriptor == null) {
        dsdCur.dimensionDescriptor = {};
      }
      return dsdCur.dimensionDescriptor[comp.id] = comp;
    },
    'KeyFamilies/KeyFamily/Components/Attribute': function(attrs) {
      if (dsdCur.attributeDescriptor == null) {
        dsdCur.attributeDescriptor = {};
      }
      return dsdCur.attributeDescriptor[comp.id] = comp;
    },
    'KeyFamilies/KeyFamily/Components/PrimaryMeasure': function(attrs) {
      dsdCur.measureDescriptor = {};
      return dsdCur.measureDescriptor.primaryMeasure = comp;
    },
    'KeyFamilies/KeyFamily/Components/Attribute/AttachmentMeasure': function(attrs) {
      if (attributeCur.AttachmentMeasure == null) {
        attributeCur.AttachmentMeasure = [];
      }
      return attributeCur.AttachmentMeasure.push(this.stringBuffer);
    },
    'KeyFamilies/KeyFamily/Components/Attribute/AttachmentGroup': function(attrs) {
      if (comp.attributeRelationship == null) {
        comp.attributeRelationship = {};
      }
      return comp.attributeRelationship.group = this.stringBuffer;
    },
    'KeyFamilies/KeyFamily/Components/Group': function(attrs) {
      if (dsdCur.dimensionGroupDescriptor == null) {
        dsdCur.dimensionGroupDescriptor = {};
      }
      return dsdCur.dimensionGroupDescriptor[comp.id] = comp;
    },
    'KeyFamilies/KeyFamily/Components/Group/DimensionRef': function(attrs) {
      if (comp.dimensions == null) {
        comp.dimensions = [];
      }
      return comp.dimensions.push(this.stringBuffer);
    }
  };

  guards = {};

  exports.fst = _.extend({}, header.fst, entryActions, exitActions, guards);

  exports.entryActions = _.defaults(entryActions, header.entryActions);

  exports.exitActions = _.defaults(exitActions, header.exitActions);

  exports.guards = _.defaults(guards, header.guards);

}).call(this);
